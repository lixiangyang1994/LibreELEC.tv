From 2c5032d607d322d03188ac740b58064c1a744180 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 8 Mar 2021 16:03:37 -0800
Subject: [PATCH 1/3] SystemInfo: remove some redundant information

---
 xbmc/windows/GUIWindowSystemInfo.cpp | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/xbmc/windows/GUIWindowSystemInfo.cpp b/xbmc/windows/GUIWindowSystemInfo.cpp
index faa47ab8c9c1..f9d69bd6794a 100644
--- a/xbmc/windows/GUIWindowSystemInfo.cpp
+++ b/xbmc/windows/GUIWindowSystemInfo.cpp
@@ -162,12 +162,6 @@ void CGUIWindowSystemInfo::FrameMove()
 #if (!defined(__arm__) && !defined(__aarch64__))
     SetControlLabel(i++, "%s %s", 13284, SYSTEM_CPUFREQUENCY);
 #endif
-#if !(defined(__arm__) && defined(TARGET_LINUX))
-    SetControlLabel(i++, "%s %s", 13271, SYSTEM_CPU_USAGE);
-#endif
-    i++;  // empty line
-    SetControlLabel(i++, "%s: %s", 22012, SYSTEM_TOTAL_MEMORY);
-    SetControlLabel(i++, "%s: %s", 158, SYSTEM_FREE_MEMORY);
   }
 
   else if (m_section == CONTROL_BT_PVR)

From 911265ccbece51cd0f13b8fa20b83ab23c723be5 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 8 Mar 2021 15:47:49 -0800
Subject: [PATCH 2/3] SystemInfo: remove some ifdefs and make info conditional

---
 xbmc/platform/linux/CPUInfoLinux.cpp |  2 +-
 xbmc/windows/GUIWindowSystemInfo.cpp | 86 +++++++++++++++++++++-------
 2 files changed, 65 insertions(+), 23 deletions(-)

diff --git a/xbmc/platform/linux/CPUInfoLinux.cpp b/xbmc/platform/linux/CPUInfoLinux.cpp
index 601c739896bd..79d8f427527b 100644
--- a/xbmc/platform/linux/CPUInfoLinux.cpp
+++ b/xbmc/platform/linux/CPUInfoLinux.cpp
@@ -326,7 +326,7 @@ int CCPUInfoLinux::GetUsedPercentage()
 float CCPUInfoLinux::GetCPUFrequency()
 {
   if (m_freqPath.empty())
-    return -1;
+    return 0;
 
   CSysfsPath path{m_freqPath};
   return path.Get<float>() / 1000.0;
diff --git a/xbmc/windows/GUIWindowSystemInfo.cpp b/xbmc/windows/GUIWindowSystemInfo.cpp
index f9d69bd6794a..1a5376954718 100644
--- a/xbmc/windows/GUIWindowSystemInfo.cpp
+++ b/xbmc/windows/GUIWindowSystemInfo.cpp
@@ -132,36 +132,78 @@ void CGUIWindowSystemInfo::FrameMove()
     SET_CONTROL_LABEL(40,g_localizeStrings.Get(20159));
     SET_CONTROL_LABEL(i++,CServiceBroker::GetGUI()->GetInfoManager().GetLabel(SYSTEM_VIDEO_ENCODER_INFO));
     SetControlLabel(i++, "%s %s", 13287, SYSTEM_SCREEN_RESOLUTION);
-#ifndef HAS_DX
-    SetControlLabel(i++, "%s %s", 22007, SYSTEM_RENDER_VENDOR);
-    SetControlLabel(i++, "%s %s", 22009, SYSTEM_RENDER_VERSION);
-#if defined(TARGET_LINUX)
-    SetControlLabel(i++, "%s %s", 39153, SYSTEM_PLATFORM_WINDOWING);
-#endif
+
+    auto renderingSystem = CServiceBroker::GetRenderSystem();
+    if (renderingSystem)
+    {
+      static std::string vendor = renderingSystem->GetRenderVendor();
+      if (!vendor.empty())
+        SET_CONTROL_LABEL(i++, StringUtils::Format("%s %s", g_localizeStrings.Get(22007), vendor));
+
+#if defined(HAS_DX)
+      int renderVersionLabel = 22024;
 #else
-    SetControlLabel(i++, "%s %s", 22024, SYSTEM_RENDER_VERSION);
+      int renderVersionLabel = 22009;
 #endif
-#if !defined(__arm__) && !defined(__aarch64__) && !defined(HAS_DX)
+      static std::string version = renderingSystem->GetRenderVersionString();
+      if (!version.empty())
+        SET_CONTROL_LABEL(
+            i++, StringUtils::Format("%s %s", g_localizeStrings.Get(renderVersionLabel), version));
+    }
+
+    auto windowSystem = CServiceBroker::GetWinSystem();
+    if (windowSystem)
+    {
+      static std::string platform = windowSystem->GetName();
+      if (platform != "platform default")
+        SET_CONTROL_LABEL(i++,
+                          StringUtils::Format("%s %s", g_localizeStrings.Get(39153), platform));
+    }
+
     SetControlLabel(i++, "%s %s", 22010, SYSTEM_GPU_TEMPERATURE);
-#endif
   }
 
   else if (m_section == CONTROL_BT_HARDWARE)
   {
     SET_CONTROL_LABEL(40,g_localizeStrings.Get(20160));
-    SET_CONTROL_LABEL(i++, "CPU: " + CServiceBroker::GetCPUInfo()->GetCPUModel());
-#if defined(__arm__) && defined(TARGET_LINUX)
-    SET_CONTROL_LABEL(i++, "BogoMips: " + CServiceBroker::GetCPUInfo()->GetCPUBogoMips());
-    if (!CServiceBroker::GetCPUInfo()->GetCPUSoC().empty())
-      SET_CONTROL_LABEL(i++, "SoC: " + CServiceBroker::GetCPUInfo()->GetCPUSoC());
-    SET_CONTROL_LABEL(i++, "Hardware: " + CServiceBroker::GetCPUInfo()->GetCPUHardware());
-    SET_CONTROL_LABEL(i++, "Revision: " + CServiceBroker::GetCPUInfo()->GetCPURevision());
-    SET_CONTROL_LABEL(i++, "Serial: " + CServiceBroker::GetCPUInfo()->GetCPUSerial());
-#endif
-    SetControlLabel(i++, "%s %s", 22011, SYSTEM_CPU_TEMPERATURE);
-#if (!defined(__arm__) && !defined(__aarch64__))
-    SetControlLabel(i++, "%s %s", 13284, SYSTEM_CPUFREQUENCY);
-#endif
+
+    auto cpuInfo = CServiceBroker::GetCPUInfo();
+    if (cpuInfo)
+    {
+      static std::string model = cpuInfo->GetCPUModel();
+      if (!model.empty())
+        SET_CONTROL_LABEL(i++, "CPU: " + model);
+
+      static std::string mips = cpuInfo->GetCPUBogoMips();
+      if (!mips.empty())
+        SET_CONTROL_LABEL(i++, "BogoMips: " + mips);
+
+      static std::string soc = cpuInfo->GetCPUSoC();
+      if (!soc.empty())
+        SET_CONTROL_LABEL(i++, "SoC: " + soc);
+
+      static std::string hardware = cpuInfo->GetCPUHardware();
+      if (!hardware.empty())
+        SET_CONTROL_LABEL(i++, "Hardware: " + hardware);
+
+      static std::string revision = cpuInfo->GetCPURevision();
+      if (!revision.empty())
+        SET_CONTROL_LABEL(i++, "Revision: " + revision);
+
+      static std::string serial = cpuInfo->GetCPUSerial();
+      if (!serial.empty())
+        SET_CONTROL_LABEL(i++, "Serial: " + serial);
+
+      // temperature can't really be conditional because of localization units
+      SetControlLabel(i++, "%s %s", 22011, SYSTEM_CPU_TEMPERATURE);
+
+      // we can check if the cpufrequency is not 0 (default if not implemented)
+      // but we have to call through CGUIInfoManager -> CSystemGUIInfo -> CSysInfo
+      // to limit the frequency of updates
+      static float cpuFreq = cpuInfo->GetCPUFrequency();
+      if (cpuFreq > 0)
+        SetControlLabel(i++, "%s %s", 13284, SYSTEM_CPUFREQUENCY);
+    }
   }
 
   else if (m_section == CONTROL_BT_PVR)

From 424bacffefe44c8a22e4e62275e4313e6ae97843 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 8 Mar 2021 15:48:44 -0800
Subject: [PATCH 3/3] CPUInfoLinux: add alternative cpu revision and serial
 locations

---
 xbmc/platform/linux/CPUInfoLinux.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/xbmc/platform/linux/CPUInfoLinux.cpp b/xbmc/platform/linux/CPUInfoLinux.cpp
index 79d8f427527b..8e3a51a2aabc 100644
--- a/xbmc/platform/linux/CPUInfoLinux.cpp
+++ b/xbmc/platform/linux/CPUInfoLinux.cpp
@@ -81,6 +81,14 @@ CCPUInfoLinux::CCPUInfoLinux()
   if (socPath.Exists())
     m_cpuSoC += " " + socPath.Get<std::string>();
 
+  CSysfsPath revisionPath{"/sys/bus/soc/devices/soc0/revision"};
+  if (revisionPath.Exists())
+    m_cpuRevision += revisionPath.Get<std::string>();
+
+  CSysfsPath serialPath{"/sys/bus/soc/devices/soc0/serial_number"};
+  if (serialPath.Exists())
+    m_cpuSerial += serialPath.Get<std::string>();
+
   const std::string freqStr{"/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq"};
   CSysfsPath freqPath{freqStr};
   if (freqPath.Exists())

